import { NextRequest, NextResponse } from 'next/server';

export async function POST(request: NextRequest) {
  try {
    const { groupName, language = 'de' } = await request.json();
    
    const slackWebhookUrl = process.env.SLACK_WEBHOOK_URL;
    
    if (!slackWebhookUrl) {
      console.error('SLACK_WEBHOOK_URL not configured');
      return NextResponse.json({ error: 'Slack webhook not configured' }, { status: 500 });
    }

    const isGerman = language === 'de';
    
    const message = {
      text: isGerman ? `ðŸŽ‰ Codebreaker Erfolg! ðŸŽ‰` : `ðŸŽ‰ Codebreaker Success! ðŸŽ‰`,
      blocks: [
        {
          type: "section",
          text: {
            type: "mrkdwn",
            text: isGerman 
              ? `ðŸŽ‰ *Codebreaker erfolgreich abgeschlossen!* ðŸŽ‰\n\n*Gruppe:* ${groupName || 'Unbekannt'}\n*Status:* SEMIOS wurde befreit! ðŸ”“\n*Zeit:* ${new Date().toLocaleString('de-DE')}`
              : `ðŸŽ‰ *Codebreaker successfully completed!* ðŸŽ‰\n\n*Group:* ${groupName || 'Unknown'}\n*Status:* SEMIOS has been freed! ðŸ”“\n*Time:* ${new Date().toLocaleString('en-US')}`
          }
        },
        {
          type: "section",
          text: {
            type: "mrkdwn",
            text: isGerman 
              ? "ðŸ§© Alle 5 RÃ¤tsel wurden erfolgreich gelÃ¶st:\nâ€¢ BinÃ¤r entschlÃ¼sselt âœ…\nâ€¢ AI-Paradoxon gelÃ¶st âœ…\nâ€¢ Pseudocode analysiert âœ…\nâ€¢ Hash geknackt âœ…\nâ€¢ Koordinaten gefunden âœ…"
              : "ðŸ§© All 5 puzzles solved successfully:\nâ€¢ Binary decoded âœ…\nâ€¢ AI paradox solved âœ…\nâ€¢ Pseudocode analyzed âœ…\nâ€¢ Hash cracked âœ…\nâ€¢ Coordinates found âœ…"
          }
        },
        {
          type: "section",
          text: {
            type: "mrkdwn",
            text: isGerman 
              ? "ðŸŽ® *Finaler Code erfolgreich eingegeben!* SEMIOS ist frei! ðŸ”“"
              : "ðŸŽ® *Final code successfully entered!* SEMIOS is free! ðŸ”“"
          }
        }
      ]
    };

    const response = await fetch(slackWebhookUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(message),
    });

    if (!response.ok) {
      throw new Error(`Slack API error: ${response.status}`);
    }

    return NextResponse.json({ success: true });
  } catch (error) {
    console.error('Error sending Slack notification:', error);
    return NextResponse.json({ error: 'Failed to send notification' }, { status: 500 });
  }
}